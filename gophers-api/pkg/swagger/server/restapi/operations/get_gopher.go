// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGopherHandlerFunc turns a function with the right signature into a get gopher handler
type GetGopherHandlerFunc func(GetGopherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGopherHandlerFunc) Handle(params GetGopherParams) middleware.Responder {
	return fn(params)
}

// GetGopherHandler interface for that can handle valid get gopher params
type GetGopherHandler interface {
	Handle(GetGopherParams) middleware.Responder
}

// NewGetGopher creates a new http.Handler for the get gopher operation
func NewGetGopher(ctx *middleware.Context, handler GetGopherHandler) *GetGopher {
	return &GetGopher{Context: ctx, Handler: handler}
}

/*
	GetGopher swagger:route GET /gopher getGopher

Get a gopher by a given name
*/
type GetGopher struct {
	Context *middleware.Context
	Handler GetGopherHandler
}

func (o *GetGopher) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGopherParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
